// Hackerrank The Longest Increasing Subsequence (nlogn)

#include<bits/stdc++.h>
#define inf -1000000000
using namespace std ;

vector<pair< int, int > > a ;
vector< int > tree(4000001) ;

bool cmp(pair<int, int> a, pair<int, int> b)
{
        if(a.first == b.first)
                return a.second > b.second ;
        else
                return a.first < b.first ;
}
void update(int node, int start, int finish, int val, int idx)
{
        if(start == finish){
                tree[node] = val + 1 ;
        }
        else
        {
                int mid = (start + finish) / 2 ;
                if(start <= idx and idx <= mid)
                        update(2 * node, start, mid, val, idx) ;
                else
                        update(2 * node + 1, mid + 1, finish, val, idx) ;
                tree[node] = max(tree[2 * node], tree[2 * node + 1]) ;
        }
}
int query(int node, int start, int finish, int l, int r)
{
        if(start > r or finish < l)
                return inf ;
        if(start >= l and finish <= r)
                return tree[node] ;
        int mid = (start + finish) / 2 ;
        int q1 = query(2 * node, start, mid, l, r) ;
        int q2 = query(2 * node + 1, mid + 1, finish, l, r) ;
        return max(q1, q2) ;
}
int main()
{
        int n ;
        cin >> n ;

        for(int i = 1; i <= n; i++)
        {
                int val ;
                cin >> val ;
                a.push_back(make_pair(val, i)) ;
        }

        sort(a.begin(), a.end(), cmp) ;

        for(int i = 1; i <= n; i++)
        {
                int right = a[i - 1].second ;
                int val = query(1, 1, n, 1, right) ;

                update(1, 1, n, val, right) ;
        }
        cout << tree[1] << endl ;

        return 0 ;
}
